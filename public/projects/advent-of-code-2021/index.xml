<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>advent of code 2021 on about me</title>
    <link>/projects/advent-of-code-2021/</link>
    <description>Recent content in advent of code 2021 on about me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/projects/advent-of-code-2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>day 3</title>
      <link>/projects/advent-of-code-2021/day3/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day3/</guid>
      <description>you can find the description here and you can find the code here</description>
    </item>
    
    <item>
      <title>day 2</title>
      <link>/projects/advent-of-code-2021/day2/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day2/</guid>
      <description>you can find the description here and you can find the code here
for part one, it is a very straight forward simulation.
(defn step-part1 [x y cmd i] (cond (= cmd &amp;#34;forward&amp;#34;) [(+ x i) y] (= cmd &amp;#34;up&amp;#34;) [x (- y i)] :else [x (+ y i)])) part two is very similar but we also need to keep track of the aim
(defn step-part2 [x y aim cmd i] (cond (= cmd &amp;#34;forward&amp;#34;) [(+ x i) (- y (* aim i)) aim] (= cmd &amp;#34;up&amp;#34;) [x y (+ aim i)] :else [x y (- aim i)]))	</description>
    </item>
    
    <item>
      <title>day 1</title>
      <link>/projects/advent-of-code-2021/day1/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day1/</guid>
      <description>you can find the description here and you can find the code here
well my solution uses a very simple (fixed size) sliding window technique, with the first part being a size 1 window and the second part a size 3 window.
def solve(l: [int], k: int): s = sum(l[:k]) res = 0 for i in range(k, len(l)): ss = s - l[i - k] + l[i] res += s &amp;lt; ss s = ss return res </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>about on about me</title>
    <link>/</link>
    <description>Recent content in about on about me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rust ray tracer</title>
      <link>/projects/rust-ray-tracer/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/projects/rust-ray-tracer/</guid>
      <description>what? good old ray tracer again
why?  earlier last year i followed Ray Tracing in One Weekend and implemented it in go to get a hang of the language. it was all nice and fun but rendering the final scene took arround 20 minutes in my M1 Macbook Air, so i was left feeling a little disatisfied. i have been solving many kattis problems in rust (particularly those that are just too slow to run in python), and i wanted to try rust on a slightly more complicated &amp;lsquo;project&amp;rsquo; i really wanted to see how rust concurrency feels.</description>
    </item>
    
    <item>
      <title>mandelrust</title>
      <link>/projects/mandelrust/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/projects/mandelrust/</guid>
      <description>what? i basically wanted to have a random zoom on an interesting mandelbrot point:
-0.761574 + -0.0847596i why?  i wanted to try out rust in an aws lambda function i wanted to build that lambda function with cdk (i&amp;rsquo;m kinda procrastinating from learning/using terraform) i was kinda hyped to use rust after reading about it  conclusions  i&amp;rsquo;m starting to dig aws hehe. i really like rust and will keep using it as much as i can i will never ever find mandelbrot set uninteresting rust lambda startup time is unlike anything i&amp;rsquo;ve ever seen.</description>
    </item>
    
    <item>
      <title>go ray tracer</title>
      <link>/projects/go-ray-tracer/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/projects/go-ray-tracer/</guid>
      <description>what? a ray tracer of course! if you are not familiar with the term, it is basically a rendering technique that is very intuitive, and fairly easy to implement naively (and yields very decent results), but tends to be computationally expensive.
why?  back in my Modeling and Programming course, we were asked to implement a ray tracer in order to get one extra credit. back then, though, even fairly easy problems seemed very scary and alien to me (plus, i had a pretty good score already).</description>
    </item>
    
    <item>
      <title>day 7</title>
      <link>/projects/advent-of-code-2021/day7/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day7/</guid>
      <description>you can find the description here and you can find the code here
def cost(l, n, f): return sum(f(e, n) for e in l) for the first part, the solution is the median.
def median(l): return l[len(l) &amp;gt;&amp;gt; 1] def part1(l): m = median(l) return cost(l, m, lambda x, y: abs(x - y)) for the second part, the solution is the average.
def part2(l): avg = sum(l) / len(l) f = lambda x, y: gauss(abs(x - y)) return min(cost(l, ceil(avg), f), cost(l, floor(avg), f)) </description>
    </item>
    
    <item>
      <title>day 6</title>
      <link>/projects/advent-of-code-2021/day6/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day6/</guid>
      <description>you can find the description here and you can find the code here
this was very fun!
my first solution consisted on a simple simulation on a double ended queue. this solution is linear on the number of days and it handles both parts without a problem.
# mutates q def step(q): n, last = q[0], q.pop() q[-1] += n q.append(last) q.rotate(-1) however, it ocurred to me while working, that i could simply simulate a single step of this as a matrix multiplication.</description>
    </item>
    
    <item>
      <title>day 5</title>
      <link>/projects/advent-of-code-2021/day5/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day5/</guid>
      <description>you can find the description here and you can find the code here
nothing interesting for this problem. just walk from p1 to p2 and add all the points you walk to a counter. for part one, simply filter those who are diagonal (start[1] == end[1] or start[0] == end[0])
for part two, don&amp;rsquo;t filter.
def span(p1, p2): sx, sy = p1 ex, ey = p2 dx = delta(sx, ex) dy = delta(sy, ey) while p1 !</description>
    </item>
    
    <item>
      <title>day 4</title>
      <link>/projects/advent-of-code-2021/day4/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day4/</guid>
      <description>you can find the description here and you can find the code here
ok. this was fun!
for both parts, i just simulated all boards with a class. only interesting thing is i kept track of all numbers contained in a board and added a rows and cols array, containing how many remaining numbers until a bingo in each row/col. this made it very easy to know if marking a number in a board yields a bingo.</description>
    </item>
    
    <item>
      <title>day 3</title>
      <link>/projects/advent-of-code-2021/day3/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day3/</guid>
      <description>you can find the description here and you can find the code here
to solve each part, we basically need a function that can give us the number of bits turned on for a certain digit index:
def count_by_index(nums, i): total = len(nums) res = ones = 0 for n in nums: if (n &amp;gt;&amp;gt; i) &amp;amp; 1: ones += 1 return ones, total - ones you can get the gamma rate by simply iterating over each possible index and assigning that index to be the digit of the most common digit of all numbers for that index.</description>
    </item>
    
    <item>
      <title>day 2</title>
      <link>/projects/advent-of-code-2021/day2/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day2/</guid>
      <description>you can find the description here and you can find the code here
for part one, it is a very straight forward simulation.
(defn step-part1 [x y cmd i] (cond (= cmd &amp;#34;forward&amp;#34;) [(+ x i) y] (= cmd &amp;#34;up&amp;#34;) [x (- y i)] :else [x (+ y i)])) part two is very similar but we also need to keep track of the aim
(defn step-part2 [x y aim cmd i] (cond (= cmd &amp;#34;forward&amp;#34;) [(+ x i) (- y (* aim i)) aim] (= cmd &amp;#34;up&amp;#34;) [x y (+ aim i)] :else [x y (- aim i)]))	</description>
    </item>
    
    <item>
      <title>day 1</title>
      <link>/projects/advent-of-code-2021/day1/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/advent-of-code-2021/day1/</guid>
      <description>you can find the description here and you can find the code here
well my solution uses a very simple (fixed size) sliding window technique, with the first part being a size 1 window and the second part a size 3 window.
def solve(l: [int], k: int): s = sum(l[:k]) res = 0 for i in range(k, len(l)): ss = s - l[i - k] + l[i] res += s &amp;lt; ss s = ss return res </description>
    </item>
    
    <item>
      <title>reading log</title>
      <link>/reading_log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/reading_log/</guid>
      <description>2022  Terraform: Up &amp;amp; Running: Writing Infrastructure as Code: terraform is really cool. good book! Building Event-Driven Microservices: Leveraging Organizational Data at Scale: currently reading it. The Man from the Future: currently reading it. Deep Learning with Python: currently reading it.  2021  Designing data intensive applications: can&amp;rsquo;t recomend it enough. Programming Rust: Fast, Safe Systems Development: i love rust and this is a great book but afaik outside of all the (wonderful) cli tooling being built in rust, i see more interesting projects being built with go (if you could point me to some interesting rust projects, i would love to see them!</description>
    </item>
    
  </channel>
</rss>
